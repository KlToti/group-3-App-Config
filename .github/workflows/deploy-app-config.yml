
name: Deployment for Application configuration
on: 
  pull_request:
    branches:
      - main
  push:
    branches:
      - Configure_ElasticSearch_application
jobs:
  # terraform-deployment:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     packages: write
  #     contents: read
  #     id-token: write
  #   steps:
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: arn:aws:iam::217741831553:role/github-actions-oidc
  #         aws-region: "eu-central-1"

      # - name: clone/checkout your repository
      #   uses: actions/checkout@v2

      # - name: Terrafom setup
      #   uses: hashicorp/setup-terraform@v1

      # - name: Terrafom Init
      #   run: terraform init

      # - name: Terrafom Plan
      #   run: terraform plan

      # - name: Terrafom Apply
      #   if: github.ref == 'refs/heads/main'
      #   run: terraform apply -auto-approve

  ansible-deployment:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::217741831553:role/github-actions-oidc
          aws-region: "eu-central-1"
      
      - name: Clone/Checkout your repository code
        uses: actions/checkout@v2

      # - name: Get private IP addresses for logstash server
      #   run: |
      #     # Get server IP for logstash_server and set to LOGSTASH_IP
      #     LOGSTACH_IP =$(aws ec2 describe-instances \
      #     --filters \
      #     "Name=instance-state-name,Values=running" \
      #     "Name=tag:Name,Values=logstash_server" \
      #     --query 'Reservations[*].Instances[*].[PrivateIpAddress]' \
      #     --output text)
      #     echo "::set-env name=LOGSTASH_IP::$LOGSTASH_IP"

      # - name: Get private IP addresses for elasticsearch server
      #   run: |
      #     # Get server IP for elasticSearch_server and set to ELASTICSERVER_IP
      #     ELASTICSERVER_IP =$(aws ec2 describe-instances \
      #     --filters \
      #     "Name=instance-state-name,Values=running" \
      #     "Name=tag:Name,Values=elasticSearch_server" \
      #     --query 'Reservations[*].Instances[*].[PrivateIpAddress]' \
      #     --output text)
      #     echo "::set-env name=ELASTICSERVER_IP::$ELASTICSERVER_IP"

      - name: Install PIP
        run: |
          sudo apt update
          sudo apt install python3-pip -y
      
      - name: Install Ansible
        run: python3 -m pip install --user ansible
      
      - name: Run Ansible playbook
        run: ansible-playbook playbook.yml    